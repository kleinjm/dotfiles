# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

**Personal Configuration:** Copy `CLAUDE.local.md.example` to `CLAUDE.local.md` for personal workflow preferences.

## Communication Standards

**Applies to all communication: code, documentation, commit messages, and conversation.**

- **Use precise technical terminology** - describe what was actually done, not perceived impact
- **Avoid marketing jargon**: "comprehensive", "robust", "seamless", "cutting-edge", "significant", "important"
- **Keep responses factual and technical** - avoid superlatives and inflated language
- **Critical thinking**: Question assumptions, point out missing information, identify potential issues
- **Ask clarifying questions** when requirements are unclear rather than guessing
- **Commit messages**: Use specific verbs ("add", "fix", "refactor") over subjective terms ("improve", "enhance")
- **Focus on measurable, testable outcomes** in specifications and documentation

## Quick Reference

**Most Common Commands:**
- `bundle exec rspec` - Run all tests
- `bundle exec rubocop -a` - Lint and auto-fix Ruby code
- `yarn test` - Run JavaScript tests
- `yarn typecheck` - Check TypeScript types
- `bin/dev` - Start development server
- `bundle exec rails runner "script"` - Execute Ruby in Rails context

## Architecture Overview

### Core Business Models
- **Escrow**: Central transaction model containing buyers, sellers, and wire instructions
- **Customer**: Base customer model with STI for buyers and sellers
- **Organization**: Escrow/title companies that manage transactions
- **Person**: Users (officers, admins) who work for organizations
- **Statement of Info (SOI)**: Multi-step form for customer information collection

### Authentication System
- V2 authentication system in `app/controllers/auth/` and `app/services/auth/`
- Session-based authentication with `UserSession` model
- Multi-factor authentication support
- Magic link authentication for customers

See [`docs/architecture/authentication-system.md`](docs/architecture/authentication-system.md) for detailed authentication implementation.

### Key Integrations
- **Plaid**: Identity verification and bank account linking (see [`docs/integrations/plaid-integration.md`](docs/integrations/plaid-integration.md))
- **Customer.io**: Email delivery and customer communication
- **Slack**: Internal notifications and alerts
- **LexisNexis**: Identity verification and compliance checks
- **Twilio**: SMS/phone number verification

#### Customer.io Email Integration
- **NOT ActionMailer**: EscrowSafe uses Customer.io for all email delivery, not Rails ActionMailer
- **Model**: `Integrations::Customerio::Email` handles email delivery via Customer.io API
- **Template System**: Email templates are managed in Customer.io dashboard using Liquid syntax
- **Delivery Pattern**: `Integrations::Customerio::Email.deliver!` with `tmsg_id`, `message_data`, and recipient
- **Common Template IDs**: `welcome_buyer`, `welcome_seller`, `welcome_member`, `welcome_statement_of_info`
- **Message Data**: Structured hash passed to Customer.io templates as variables
- **Testing**: Use `Integrations::Customerio.disable_email!` in development/test environments

### Services
Services follow the `service_base` gem pattern with monadic results:

**Architecture:**
- All services inherit from `ApplicationService`
- Use `Success()` and `Failure()` for return values
- Handle service results with `do |on|` blocks, not direct variable assignment

**Development Patterns:**
- Use `Type::` module for argument type declarations
- Include descriptive `description` fields for services and arguments
- Use `optional: true` for optional arguments
- Use `default: value.freeze` for default values
- Don't rescue `StandardError` - use `Failure()` for expected failures only

### Database Design
- PostgreSQL database with UUIDs for primary keys
- Soft deletion pattern using `deleted_at` timestamps
- Audit trail with PaperTrail gem
- Encrypted fields for sensitive data (bank accounts, SSNs)

### Frontend Architecture
- Rails with Stimulus controllers for JavaScript interactivity
- Slim templates for views
- Bootstrap CSS framework
- Turbo for SPA-like navigation
- ViewComponent for reusable UI components

## Task-Based Documentation References

**Load these files based on your current task context to minimize context window usage:**

> **Note**: All development standards have been consolidated into `docs/claude/` as the single source of truth. The original `.cursor/rules/` and `.agent-os/standards/` files now point to these centralized documents.

### For Development & Code Style
- **Ruby Guidelines**: [`docs/claude/ruby-style.md`](docs/claude/ruby-style.md)
- **Rails/Database Guidelines**: [`docs/claude/development-guidelines.md`](docs/claude/development-guidelines.md)
- **JavaScript/TypeScript**: [`docs/claude/javascript-typescript.md`](docs/claude/javascript-typescript.md)
- **Service Objects**: [`docs/claude/services-and-patterns.md`](docs/claude/services-and-patterns.md)

### For Testing Tasks
- **Testing Standards**: [`docs/claude/testing.md`](docs/claude/testing.md)
- **Factory Management**: [`docs/claude/factories-and-fixtures.md`](docs/claude/factories-and-fixtures.md)

### For Development & Tooling
- **Commands**: [`docs/development/commands.md`](docs/development/commands.md)
- **TypeScript Setup**: [`docs/development/typescript-setup.md`](docs/development/typescript-setup.md)
- **Asset Management**: [`docs/development/asset-management.md`](docs/development/asset-management.md)

### For Frontend Development
- **Views & Templates**: [`docs/claude/views-and-templates.md`](docs/claude/views-and-templates.md)

### For Debugging & Troubleshooting
- **Debugging Guide**: [`docs/development/debugging-guide.md`](docs/development/debugging-guide.md)

### For Rails-Specific Work
- **Rails Patterns**: [`docs/architecture/rails-patterns.md`](docs/architecture/rails-patterns.md)
- **Nested Forms**: [`docs/architecture/nested-forms.md`](docs/architecture/nested-forms.md)
- **Nested Attributes**: [`docs/architecture/nested-attributes.md`](docs/architecture/nested-attributes.md)

### For Operations & Deployment Tasks
- **Git Workflow**: [`docs/operations/git-workflow.md`](docs/operations/git-workflow.md)
- **Deployments**: [`docs/operations/deployments.md`](docs/operations/deployments.md)
- **Staging Operations**: [`docs/operations/staging-db-reset.md`](docs/operations/staging-db-reset.md)

### For Architecture & Integration Tasks
- **Authentication**: [`docs/architecture/authentication-system.md`](docs/architecture/authentication-system.md)
- **Plaid Integration**: [`docs/integrations/plaid-integration.md`](docs/integrations/plaid-integration.md)
- **Activity System**: [`docs/architecture/activity-system.md`](docs/architecture/activity-system.md)
- **Product Architecture**: [`docs/product/tech-stack.md`](docs/product/tech-stack.md)

### Claude Commands & Workflows
- **Test Optimization**: [`.claude/commands/optimize-tests.md`](.claude/commands/optimize-tests.md) - Systematic test performance improvement workflow

## Environment Information
- **Development**: localhost:3000
- **Staging**: https://staging.escrowsafe.com/
- **Production**: https://escrowsafe.com/
- **Statement of Info**: Often abbreviated as "SOI" in code

## Key Directories

- `app/services/` - Business logic services
- `app/models/integrations/` - Third-party service integrations
- `app/controllers/auth/` - Authentication controllers
- `app/controllers/customers/` - Customer-facing controllers
- `app/controllers/admin/` - Admin interface controllers
- `app/jobs/` - Background job processing
- `app/javascript/controllers/` - Stimulus controllers for frontend interactivity
- `spec/` - RSpec test suite with factories and support files
- `test/controllers/` - JavaScript/Vitest tests for Stimulus controllers
- `docs/claude/` - AI assistant development standards and coding guidelines
- `.claude/commands/` - Custom commands and workflows (e.g., test optimization)

## Agent OS Integration

This project follows Agent OS conventions for AI-assisted development. Learn more about Agent OS at https://buildermethods.com/agent-os.

### Directory Structure
- `.agent-os/product/` - Product documentation (mission, tech-stack, roadmap, decisions)
- `.agent-os/specs/` - Feature specifications and implementation details
- `docs/claude/` - Development standards and coding guidelines (consolidated)
- `.cursor/rules/` - Pointer references to centralized docs in `docs/claude/`

### Workflow
- Product specifications are maintained in `.agent-os/specs/` as markdown files
- Use established patterns in `docs/claude/` for consistent code style and development standards
- Technical decisions and architecture details are documented in `.agent-os/product/`

### Creating Specifications
When implementing features or significant changes:
1. Create specification document in `.agent-os/specs/` before starting work
2. Document implementation status and progress within the spec during development
3. Update relevant product documentation if architecture changes

### Work Sessions
- Each development session should reference or create a corresponding specification
- Track progress and decisions within the spec document
- Specifications serve as both planning documents and implementation logs

### Agent OS Commands
Agent OS provides structured commands for consistent workflows:
- `/create-spec [feature-name]` - Generate a new specification document template
- `/execute-task [spec-file]` - Begin implementation of a specification
- `/plan-product` - Review and plan product roadmap items
- `/analyze-product` - Analyze current product state and architecture

These commands help maintain consistency in documentation and implementation approaches.

### Advanced: Session Continuity (Optional)

For complex, multi-session development work spanning weeks or multiple Claude sessions, you may create personal tracking files:

- **`.claude/sessions/`** - Cross-session context files for complex feature work
  - Complete progress tracking across development sessions
  - TodoWrite recreation instructions for continuing work
  - Technical decisions and architecture insights
  - Manual testing results and verification status

- **`.claude/tasks/`** - Focused task tracking for specific deliverables
  - Checkbox-style progress tracking for features/bugs
  - Product feedback integration and design notes
  - Implementation decisions and scope changes
  - Links to related work and dependencies

**Usage Guidelines:**
- **Use when**: Working on features spanning multiple weeks/sessions (e.g., Auth V2, major refactors)
- **Skip when**: Simple bugs, single-session work, or straightforward features
- **Reference**: Use `@.claude/sessions/filename.md` or `@.claude/tasks/filename.md` in prompts
- **Maintenance**: Keep files current and delete when work is complete to avoid staleness

**File Structure Example:**
```
.claude/
├── sessions/
│   ├── README.md
│   └── auth-v2-session-summary.md
└── tasks/
    ├── README.md
    └── new-feature-implementation.md
```

These directories are gitignored and personal to each developer - they serve as external memory for Claude Code across long-running development efforts.

### Spec Synchronization Guidelines

**IMPORTANT**: Always keep `.agent-os/specs/` documents in sync with implementation progress:

1. **During Development**:
   - Update spec files immediately when completing tasks or milestones
   - Mark tasks as completed in real-time, not in batches
   - Document any scope changes, discoveries, or deviations within the spec
   - Update progress percentages and status sections as work progresses

2. **Definition of Done**:
   - Feature implementation is not complete until corresponding spec is updated
   - All task checkboxes should reflect actual completion status
   - Any follow-up work discovered during implementation should be added to the spec

3. **Continuous Improvement**:
   - After completing major features, proactively suggest spec refinements
   - Update product documentation (decisions.md, roadmap.md) when architecture changes
   - Capture lessons learned and patterns for future reference

4. **Workflow Integration**:
   - Use TodoWrite tool to track progress, then sync to corresponding specs
   - When starting new work, check if a spec exists or needs to be created
   - Treat specs as living documents that reflect current reality, not aspirations