# frozen_string_literal: true

require 'rails_helper'

RSpec.describe CreateLegalOwnershipService do
  it 'creates buyer customer and legal ownership for authorized signatory' do
    organization = create(:organization)
    escrow = create(:escrow, organization: organization)
    legal_entity = create(:legal_entity, :corporation, escrow: escrow, customer_type: 'buyer')
    customer_attributes = {
      first_name: 'John',
      last_name: 'Signatory',
      email: 'john.signatory@example.com',
      phone_number: '+15551234567'
    }

    described_class.call(
      legal_entity: legal_entity,
      relationship_type: LegalOwnership::RELATIONSHIP_TYPES[:authorized_signatory],
      customer_attributes: customer_attributes
    ) do |on|
      on.success do |ownership|
        expect(ownership).to be_a(LegalOwnership)
        expect(ownership.relationship_type).to eq(LegalOwnership::RELATIONSHIP_TYPES[:authorized_signatory])
        expect(ownership.legal_entity).to eq(legal_entity)
        expect(ownership.customer).to be_a(Buyer)
        expect(ownership.customer.escrow).to eq(escrow)
        expect(ownership.customer.first_name).to eq('John')
        expect(ownership.customer.last_name).to eq('Signatory')
        expect(ownership.customer.email).to eq('john.signatory@example.com')
        expect(ownership.customer.phone_number).to eq('+15551234567')
        expect(Feature).to be_fincen_enabled(ownership.customer)
      end
      on.failure { |errors| raise "Expected success, got failure: #{errors.full_messages}" }
    end
  end

  it 'creates seller customer and legal ownership for beneficial owner' do
    organization = create(:organization)
    escrow = create(:escrow, organization: organization)
    legal_entity = create(:legal_entity, :llc, escrow: escrow, customer_type: 'seller')
    customer_attributes = {
      first_name: 'Alice',
      last_name: 'Owner',
      email: 'alice.owner@example.com',
      phone_number: '+15551234568'
    }

    described_class.call(
      legal_entity: legal_entity,
      relationship_type: LegalOwnership::RELATIONSHIP_TYPES[:beneficial_owner],
      customer_attributes: customer_attributes
    ) do |on|
      on.success do |ownership|
        expect(ownership).to be_a(LegalOwnership)
        expect(ownership.relationship_type).to eq(LegalOwnership::RELATIONSHIP_TYPES[:beneficial_owner])
        expect(ownership.legal_entity).to eq(legal_entity)
        expect(ownership.customer).to be_a(Seller)
        expect(ownership.customer.escrow).to eq(escrow)
      end
      on.failure { |errors| raise "Expected success, got failure: #{errors.full_messages}" }
    end
  end

  it 'returns failure with validation errors for invalid customer attributes' do
    organization = create(:organization)
    escrow = create(:escrow, organization: organization)
    legal_entity = create(:legal_entity, :corporation, escrow: escrow, customer_type: 'buyer')
    invalid_attributes = {
      first_name: '',
      last_name: '',
      email: 'invalid-email',
      phone_number: ''
    }

    described_class.call(
      legal_entity: legal_entity,
      relationship_type: LegalOwnership::RELATIONSHIP_TYPES[:authorized_signatory],
      customer_attributes: invalid_attributes
    ) do |on|
      on.success { |result| raise "Expected failure, got success: #{result}" }
      on.failure do |errors|
        expect(errors).to be_an(ActiveModel::Errors)
        expect(errors[:first_name]).to include("can't be blank")
        expect(errors[:last_name]).to include("can't be blank")
        expect(errors[:email]).to include('is invalid')
        expect(errors[:phone_number]).to include("can't be blank")
      end
    end
  end

  it 'returns failure for duplicate customer email' do
    organization = create(:organization)
    escrow = create(:escrow, organization: organization)
    legal_entity = create(:legal_entity, :corporation, escrow: escrow, customer_type: 'buyer')
    create(:buyer, escrow: escrow, email: 'duplicate@example.com')

    customer_attributes = {
      first_name: 'John',
      last_name: 'Signatory',
      email: 'duplicate@example.com',
      phone_number: '+15551234567'
    }

    described_class.call(
      legal_entity: legal_entity,
      relationship_type: LegalOwnership::RELATIONSHIP_TYPES[:authorized_signatory],
      customer_attributes: customer_attributes
    ) do |on|
      on.success { |result| raise "Expected failure, got success: #{result}" }
      on.failure do |errors|
        expect(errors).to be_an(ActiveModel::Errors)
        expect(errors[:email]).to include('has already been taken')
      end
    end
  end

  it 'returns failure for invalid relationship type' do
    organization = create(:organization)
    escrow = create(:escrow, organization: organization)
    legal_entity = create(:legal_entity, :corporation, escrow: escrow, customer_type: 'buyer')
    customer_attributes = {
      first_name: 'John',
      last_name: 'Signatory',
      email: 'john.signatory@example.com',
      phone_number: '+15551234567'
    }

    described_class.call(
      legal_entity: legal_entity,
      relationship_type: 'invalid_type',
      customer_attributes: customer_attributes
    ) do |on|
      on.success { |result| raise "Expected failure, got success: #{result}" }
      on.failure do |errors|
        expect(errors).to be_an(ActiveModel::Errors)
        expect(errors[:relationship_type]).to include('is not included in the list')
      end
    end
  end
end