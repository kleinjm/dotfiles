# frozen_string_literal: true

require 'rails_helper'
require 'service_base/rspec'

RSpec.describe CustomerEntityForm do
  describe '#initialize, entity building, and helper methods' do
    it 'handles all entity types, validates predicate methods, and provides configuration' do
      organization = create(:organization)
      escrow = create(:escrow, organization: organization)
      features = [Feature::LIST[:fincen]]

      # Test individual (default) - buyer
      form = described_class.new(escrow, customer_type: 'buyer', features: features, organization: organization)
      expect(form.entity_type).to eq('individual')
      expect(form.individual?).to be true
      expect(form.legal_entity?).to be false

      entity = form.build_entity
      expect(entity).to be_a(Buyer)
      expect(entity).to be_new_record

      # Test seller individual with attributes
      form = described_class.new(
        escrow,
        customer_type: 'seller',
        entity_attributes: { entity_type: 'individual', first_name: 'John', last_name: 'Doe' },
        features: features
      )
      entity = form.build_entity
      expect(entity).to be_a(Seller)
      expect(form.first_name).to eq('John')
      expect(form.last_name).to eq('Doe')

      # Test corporation with predicate methods
      form = described_class.new(
        escrow,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'corporation', business_name: 'Acme Corp', tax_id: '12-3456789' },
        features: features
      )
      entity = form.build_entity
      expect(entity).to be_a(LegalEntity)
      expect(entity.entity_type).to eq('corporation')
      expect(entity.customer_type).to eq('buyer')
      expect(form.business_name).to eq('Acme Corp')
      expect(form.individual?).to be false
      expect(form.legal_entity?).to be true
      expect(form.corporation_or_llc?).to be true
      expect(form.trust?).to be false

      # Test trust with date parsing and predicate methods
      form = described_class.new(
        escrow,
        customer_type: 'seller',
        entity_attributes: {
          entity_type: 'trust',
          business_name: 'Smith Trust',
          tax_id: '98-7654321',
          date_created: '2020-01-15',
          revokable: true
        },
        features: features,
        organization: organization
      )
      entity = form.build_entity
      expect(entity).to be_a(LegalEntity)
      expect(entity.entity_type).to eq('trust')
      expect(form.date_created).to eq(Date.parse('2020-01-15'))
      expect(form.revokable).to be(true)
      expect(form.trust?).to be true
      expect(form.corporation_or_llc?).to be false

      # Test entity type options (memoized)
      expected_options = [
        %w[Individual individual],
        %w[Corporation corporation],
        %w[LLC llc],
        %w[Trust trust]
      ]
      expect(form.entity_type_options).to eq(expected_options)

      # Test form URLs
      expect(form.form_url).to include('seller_entities')
      buyer_form = described_class.new(escrow, customer_type: 'buyer', organization: escrow.organization)
      expect(buyer_form.form_url).to include('buyer_entities')
    end

    it 'handles phone number normalization and international settings' do
      escrow = create(:escrow)
      features = [Feature::LIST[:fincen]]

      # Phone normalization for individuals only
      form = described_class.new(
        escrow,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'individual' },
        features: features
      )
      form.phone_number = '555-123-4567'
      expect(form.phone_number).to eq('+15551234567')

      # No normalization for legal entities
      form = described_class.new(
        escrow,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'corporation' },
        features: features
      )
      form.phone_number = '555-123-4567'
      expect(form.phone_number).to eq('555-123-4567')

      # Test international functionality
      form.international = true
      expect(form.international?).to be true
      form.international = '1'
      expect(form.international?).to be true
      form.international = false
      expect(form.international?).to be false
    end
  end

  describe 'validations' do
    it 'validates all entity types with appropriate requirements and error conditions' do
      escrow = create(:escrow)
      features = [Feature::LIST[:fincen]]

      # Individual validation failures
      form = described_class.new(
        escrow,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'individual' },
        features: features
      )
      expect(form).not_to be_valid
      expect(form.errors[:first_name]).to include("can't be blank")
      expect(form.errors[:last_name]).to include("can't be blank")
      expect(form.errors[:email]).to include("can't be blank")
      expect(form.errors[:phone_number]).to include("can't be blank")

      # Test email format validation
      form.email = 'invalid-email'
      form.valid?
      expect(form.errors[:email]).to include('is invalid')

      # Corporation validation failures and international exception
      form = described_class.new(
        escrow,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'corporation' },
        features: features
      )
      expect(form).not_to be_valid
      expect(form.errors[:business_name]).to include("can't be blank")
      expect(form.errors[:tax_id]).to include("can't be blank")
      expect(form.errors[:jurisdiction]).to include("can't be blank")

      # International doesn't require jurisdiction
      form.international = true
      form.business_name = 'Corp'
      form.tax_id = '12-345'
      form.valid?
      expect(form.errors[:jurisdiction]).to be_empty

      # Trust validation with date requirements
      form = described_class.new(
        escrow,
        customer_type: 'seller',
        entity_attributes: { entity_type: 'trust' },
        features: features
      )
      expect(form).not_to be_valid
      expect(form.errors[:date_created]).to include("can't be blank")

      # Future date validation
      form.date_created = 1.day.from_now.to_date
      form.business_name = 'Future Trust'
      form.tax_id = '12-3456789'
      form.valid?
      expect(form.errors[:date_created]).to include('cannot be in the future')

      # Valid dates (current and past)
      form.date_created = Date.current
      form.valid?
      expect(form.errors[:date_created]).to be_empty

      form.date_created = 1.year.ago.to_date
      form.valid?
      expect(form.errors[:date_created]).to be_empty
    end
  end

  describe '#save' do
    it 'calls service when valid, handles failures, and manages entity records' do
      features = [Feature::LIST[:fincen]]
      org = create(:organization)
      esc = create(:escrow, organization: org)

      # Test successful save
      form = described_class.new(
        esc,
        customer_type: 'buyer',
        entity_attributes: {
          entity_type: 'individual',
          first_name: 'John',
          last_name: 'Doe',
          email: 'john@example.com',
          phone_number: '+15551234567'
        },
        features: features
      )

      buyer = build(:buyer, escrow: esc)
      stub_service_success(SaveCustomerEntityFormService, success: buyer)

      expect(SaveCustomerEntityFormService).to receive(:call).with(
        form: form,
        escrow: esc,
        customer_type: 'buyer',
        current_person: Current.person,
        invite_customer: false,
        features: features
      )

      expect(form.save).to be true
      expect(form.entity_record).to eq(buyer)

      # Test invalid form doesn't call service
      invalid_form = described_class.new(
        esc,
        customer_type: 'buyer',
        entity_attributes: { entity_type: 'individual' }, # Missing required fields
        features: features
      )

      expect(SaveCustomerEntityFormService).not_to receive(:call)
      expect(invalid_form.save).to be false
    end
  end
end