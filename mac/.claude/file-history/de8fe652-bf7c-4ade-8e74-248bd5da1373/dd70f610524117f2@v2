# frozen_string_literal: true

# Form object for creating customers or legal entities (buyers/sellers) in FinCEN layout
# Supports both individual customers and legal entities (corporation, LLC, trust)
class CustomerEntityForm < BaseForm
  ENTITY_TYPES = {
    individual: 'individual'
  }.merge(LegalEntity::ENTITY_TYPES).freeze

  # Virtual properties for entity creation
  property :entity_type, virtual: true, default: ENTITY_TYPES[:individual]

  # Individual customer properties (virtual since they map to dynamic models)
  property :first_name, virtual: true
  property :last_name, virtual: true
  property :email, virtual: true
  property :phone_number, virtual: true

  # Legal entity properties (virtual since they map to dynamic models)
  property :business_name, virtual: true
  property :tax_id, virtual: true
  property :jurisdiction, virtual: true
  property :international, virtual: true, default: false
  property :date_created, virtual: true
  property :revokable, virtual: true, default: false

  # ActiveModel validations - conditional based on entity type
  validates :entity_type, presence: true, inclusion: { in: ENTITY_TYPES.values }

  # Individual validations
  validates :first_name, presence: true, if: :individual?
  validates :last_name, presence: true, if: :individual?
  validates :email, presence: true, format: { with: URI::MailTo::EMAIL_REGEXP }, if: :individual?
  validates :phone_number, presence: true, if: :individual?

  # Legal entity validations
  validates :business_name, presence: true, if: :legal_entity?
  validates :tax_id, presence: true, if: :legal_entity?
  validates :jurisdiction, presence: true, if: -> { legal_entity? && !international? }

  # Trust-specific validations
  validates :date_created, presence: true, if: :trust?
  validates :date_created, comparison: { less_than_or_equal_to: Date.current, message: 'cannot be in the future' },
                           if: -> { trust? && date_created.present? }

  # Initialize with escrow and options
  def initialize(escrow, customer_type:, entity_attributes: {}, features: [], organization: nil, invite_customer: false)
    @escrow = escrow
    @customer_type = customer_type
    @features = features
    @organization = organization
    @invite_customer = invite_customer

    # Initialize Reform with empty composition since we use virtual properties
    super({})

    # Apply attributes from params
    entity_attributes.each do |key, value|
      public_send("#{key}=", value) if respond_to?("#{key}=")
    end

    # Normalize phone number for individuals
    normalize_phone_number if individual? && phone_number.present?
  end

  # Override save to use our service layer
  def save
    return false unless valid?

    SaveCustomerEntityFormService.call(
      form: self,
      escrow: escrow,
      customer_type: customer_type,
      invite_customer: invite_customer,
      features: features
    ) do |on|
      on.success do |entity|
        @entity_record = entity
        return true
      end
      on.failure do |errors|
        merge_service_errors(errors)
        return false
      end
    end
  end

  # Phone number normalization for individuals
  def phone_number=(value)
    super(if individual? && value.present?
            PhoneNumberFormatter.normalize(value)
          else
            value
          end)
  end

  # Date parsing for trust date_created
  def date_created=(value)
    super(case value
          when String
            value.present? ? Date.parse(value) : nil
          else
            value
          end)
  end

  # Build the appropriate entity based on current form state
  def build_entity
    if individual?
      build_customer
    else
      build_legal_entity
    end
  end

  # Entity type helper methods
  def individual?
    entity_type == ENTITY_TYPES[:individual]
  end

  def legal_entity?
    !individual?
  end

  def corporation_or_llc?
    [ENTITY_TYPES[:corporation], ENTITY_TYPES[:llc]].include?(entity_type)
  end

  def trust?
    entity_type == ENTITY_TYPES[:trust]
  end

  def international?
    [true, '1', 1].include?(international)
  end

  # URL helpers
  def form_url
    case customer_type
    when Customer::BUYER
      Rails.application.routes.url_helpers.organization_escrow_fincen_layout_buyer_entities_path(organization, escrow)
    when Customer::SELLER
      Rails.application.routes.url_helpers.organization_escrow_fincen_layout_seller_entities_path(organization, escrow)
    end
  end

  # URL for cancel link / back to entity index
  def index_path
    case customer_type
    when Customer::BUYER
      Rails.application.routes.url_helpers.organization_escrow_fincen_layout_buyer_entities_path(organization, escrow)
    when Customer::SELLER
      Rails.application.routes.url_helpers.organization_escrow_fincen_layout_seller_entities_path(organization, escrow)
    else
      Rails.application.routes.url_helpers.organization_escrow_path(organization, escrow)
    end
  end

  # Options for entity type select dropdown
  memoize def entity_type_options
    [
      %w[Individual individual],
      %w[Corporation corporation],
      %w[LLC llc],
      %w[Trust trust]
    ]
  end

  # Expose attributes for views
  attr_reader :escrow, :customer_type, :features, :organization, :invite_customer, :entity_record

  # ActiveModel interface for form_with compatibility
  def persisted?
    false
  end

  def to_key
    nil
  end

  def to_param
    nil
  end

  memoize def model_name
    ::ActiveModel::Name.new(self.class, nil, 'customer_entity_form')
  end

  private

  def normalize_phone_number
    self.phone_number = PhoneNumberFormatter.normalize(phone_number) if phone_number.present?
  end

  def build_customer
    customer_class = customer_type == Customer::BUYER ? Buyer : Seller
    customer_class.new(
      escrow: escrow,
      first_name: first_name,
      last_name: last_name,
      email: email,
      phone_number: phone_number
    )
  end

  def build_legal_entity
    LegalEntity.new(
      escrow: escrow,
      customer_type: customer_type,
      entity_type: map_entity_type_to_legal_entity_type,
      business_name: business_name,
      tax_id: tax_id,
      jurisdiction: jurisdiction,
      international: international,
      date_created: date_created,
      revokable: revokable
    )
  end

  def map_entity_type_to_legal_entity_type
    case entity_type
    when ENTITY_TYPES[:corporation]
      LegalEntity::ENTITY_TYPES[:corporation]
    when ENTITY_TYPES[:llc]
      LegalEntity::ENTITY_TYPES[:llc]
    when ENTITY_TYPES[:trust]
      LegalEntity::ENTITY_TYPES[:trust]
    else
      entity_type
    end
  end
end