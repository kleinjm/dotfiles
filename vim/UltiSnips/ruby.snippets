global !p
from snippet_helpers_ruby import *
endglobal

# fzfe

snippet fzexpect "fzf: rspec-expectations" b
`cat ~/Documents/fzf-ultisnips/rspec_expectations | fzf-tmux -d 15`
endsnippet

snippet fzmocks "fzf: rspec-mocks" b
`cat ~/Documents/fzf-ultisnips/rspec_mocks | fzf-tmux -d 15`
endsnippet

# templates

snippet _spec "templates: rspec" b
# frozen_string_literal: true

RSpec.describe `!p rb_spec_class_name(path, snip)` do
  $0
end
endsnippet

# functions

snippet init "constructor"
def initialize(${1:*args})
`!p rb_assign_instance_var_list(t[1], snip)`
end
endsnippet

# patterns

snippet mmemo "patterns: multi-line memoization" b
return @${1:ivar} if defined? @$1
@$1 = begin
  $0
end
endsnippet

# rspec

snippet con "rspec: context"
context "when $1" do
  $0
end
endsnippet

snippet des "rspec: describe" b
describe "$1" do
  $0
end
endsnippet

snippet it "rspec: it" b
it "$1" do
  $0
end
endsnippet

snippet let "rspec: let" b
let(:$1) { $0 }
endsnippet

snippet letd "rspec: let double()" b
let(:$1) { double() }
endsnippet

snippet sub "rspec: subject" b
subject { ${1:described_class.new($0)} }
endsnippet

# debugging

snippet pry "debugging: binding.pry" b
binding.pry
endsnippet
